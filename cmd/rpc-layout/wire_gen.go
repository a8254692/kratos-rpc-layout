// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/go-kratos/kratos/v2/registry"
	"gitlab.top.slotssprite.com/my/rpc-layout/internal/biz"
	"gitlab.top.slotssprite.com/my/rpc-layout/internal/data"
	"gitlab.top.slotssprite.com/my/rpc-layout/internal/server"
	"gitlab.top.slotssprite.com/my/rpc-layout/internal/service"
	"gitlab.top.slotssprite.com/my/rpc-layout/party/bootstrap"
)

// Injectors from wire.go:

// wireApp init kratos application.
func initApp(serviceInfo *bootstrap.ServiceInfo, registrar registry.Registrar, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData()
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserImp(dataData)
	userUseCase := biz.NewUserUseCase(userRepo)
	userService := service.NewUserService(userUseCase)
	grpcServer := server.NewGRPCServer(userService)
	monitorServer, err := server.NewMonitorHTTPServer()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	app := newApp(serviceInfo, logger, registrar, grpcServer, monitorServer)
	return app, func() {
		cleanup()
	}, nil
}
